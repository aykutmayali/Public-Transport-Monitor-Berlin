cmake -DCMAKE_TOOLCHAIN_FILE=/Users/Shared/C++/vcpkg/scripts/buildsystems/vcpkg.cmake ..



${workspaceFolder}/**
${vcpkgRoot}/x64-osx/include,
${vcpkgRoot}/**,
"/usr/local/Cellar/wxmac/3.0.5.1/**",
"/usr/local/Cellar/wxmac/3.0.5.1/include/wx-3.0/**"


${workspaceFolder}/**
${vcpkgRoot}/**
/usr/local/Cellar/wxmac/3.0.5.1_1/include/wx-3.0/wx/**
/usr/local/Cellar/wxmac/3.0.5.1_1/include/wx-3.0/wx/osx/**
/usr/local/Cellar/wxmac/3.0.5.1_1/lib/wx/include/osx_cocoa-unicode-3.0/wx/**
/usr/local/include/wx-3.0/**


${workspaceFolder}/**
${vcpkgRoot}/x64-osx/include
${vcpkgRoot}/**
/usr/local/lib
/usr/local/include




{
    "configurations": [
        {
            "name": "Mac",
            "includePath": [
                "${workspaceFolder}/**",
                "/usr/local/include/wx-3.0/**",
                "${vcpkgRoot}/x64-osx/include",
                "/usr/local/Cellar/wxmac/**",
                "/usr/local/Cellar/wxmac/3.0.5.1_1/include/wx-3.0"
            ],
            "defines": [],
            "macFrameworkPath": [],
            "compilerPath": "/usr/local/bin/g++-9",
            "cStandard": "c11",
            "cppStandard": "c++17"
        }
    ],
    "version": 4
}



"${workspaceFolder}/**",
"${vcpkgRoot}/**",
"/usr/local/Cellar/wxmac/**",
"/usr/local/include/wx-3.0/**",
"/usr/local/lib/wx/**"


***

icu4c is keg-only, which means it was not symlinked into /usr/local,
because macOS provides libicucore.dylib (but nothing else).

If you need to have icu4c first in your PATH run:
  echo 'export PATH="/usr/local/opt/icu4c/bin:$PATH"' >> /Users/sk/.bash_profile
  echo 'export PATH="/usr/local/opt/icu4c/sbin:$PATH"' >> /Users/sk/.bash_profile

For compilers to find icu4c you may need to set:
  export LDFLAGS="-L/usr/local/opt/icu4c/lib"
  export CPPFLAGS="-I/usr/local/opt/icu4c/include"

For pkg-config to find icu4c you may need to set:
  export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig"

==> Summary
🍺  /usr/local/Cellar/icu4c/67.1: 258 files, 71MB
==> Installing cpprestsdk dependency: boost
==> Pouring boost-1.73.0.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/boost/1.73.0: 14,538 files, 587MB
==> Installing cpprestsdk
==> Pouring cpprestsdk-2.10.16.mojave.bottle.tar.gz
🍺  /usr/local/Cellar/cpprestsdk/2.10.16: 52 files, 6.2MB
==> `brew cleanup` has not been run in 30 days, running now...

***


Old CMake File: 

cmake_minimum_required(VERSION 3.11.3)

set(CMAKE_CXX_STANDARD 17)

project(Scraper)

find_package(wxWidgets REQUIRED COMPONENTS core base)
include(${wxWidgets_USE_FILE})

file(GLOB project_SRCS src/*.cpp)

add_executable(scraper ${project_SRCS})
target_link_libraries(scraper ${wxWidgets_LIBRARIES})
target_include_directories(scraper PRIVATE ${wxWidgets_INCLUDE_DIRS})




Thanks for help, yes, I manually set the OPENSSL_SSL_LIBRARIES=/usr/local/ssl/lib OPENSSL_INCLUDE_DIR=/usr/loca/ssl/include/openssl OPEN_ROOT_DIR=/usr/local/ssl in CMakeCache.txt, it works!

Actually, there is no OPENSSL_LIBRARIES in CMakeCache.txt, it named OPENSSL_SSL_LIBRARIES.


https://cmake.org/cmake/help/latest/guide/tutorial/index.html#adding-usage-requirements-for-library-step-3
https://cmake.org/cmake/help/v3.0/command/set.html
https://github.com/substack/libssh/issues/1


To find OpenSSL, run the following (edit the path accordingly): 

export OPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/
export OPENSSL_INCLUDE_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/include/

https://qwintry.com/ru?roistat_visit=10200332


Steps:
+ edit CMakeLists.txt to add multiple files
+ print data to console
+ parse data -> json parser or read the stream
+ create class aeroplane
+ add id counter
+ cmake and header files: ensure correct file linking and build
+ abstract away http request in a separate class and file
+ define getters and setters in the aeroplane class 
+ API data can be null -> protect against it
+ write a template and a func used in Aeroplane::Update() to accept (_priv_var, planeData, Type)
+ test an instance of the aeroplane object
+ create aeroplane objects in a for loop based on parsed data using smart pointers
+ write data to an instance of the aeroplane object (smart pointer)
+ move an airoplane object to a std::vector<std::unique_ptr>
+ change project to Singapore public transport monitor
+ set geo coordinates: 
  1) Berlin Tegel – 52.557396, 13.287704, Funkhaus Berlin Nalepastrasse – 52.483175, 13.505750  (link = https://v5.vbb.transport.rest/radar?north=52.557396&west=13.287704&south=52.483175&east=13.505750)
  2) 52.525562, 13.348276 + 52.503455, 13.413168
+ test if request returns data
- see what kind of vehicles are available:
  - bus
  - ubahn
  - sbahn
- set vehicle's direction – polylines (2 frames?)
- refactor Controller.cpp
- create while loop fetching data from the API every 5 seconds, parse the data received, update aeroplane objects, create new and delete old ones
- message queue with request to each plane? ("https://opensky-network.org/api/states/all?time=1458564121&icao24=3c6444")

- Data:
  - Add (const &domain, const &geo) to Data() constructor
  - For loop for geo's members {builder.append_query}. Purpose: make constructor reusable for different API calls
  - Data::Fetch(): add a while loop
  - Berlin: buses – GET /trips/:id; GET /radar



cd ..
rm -rf build/
mkdir build && cd build
export OPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/
export OPENSSL_INCLUDE_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/include/
cmake .. && make


** use g++ to compile when buillding with CMake
export CC=/usr/local/bin/gcc-9
export CXX=/usr/local/bin/g++-9
cmake ..
make


export CC=/usr/bin/gcc
export CXX=/usr/bin/g++

export CC=/usr/bin/clang
export CXX=/usr/bin/clang++

export CC=/usr/bin/llvm-gcc
export CXX=/usr/bin/llvm-g++

Default Apple Xcode compilers:

export CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
export CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++


*When compiling with gcc, extras needed:

#ifdef __APPLE__
# include <string.h>
# include <xlocale.h>
#endif


***

API Key:

Thank you for your interest in LTA's DataMall.

The following API Account Key grants you access to all dynamic / real-time datasets in DataMall. For instructions on how to access the APIs and make use of the datasets, you may refer to the API User Guide here.

API Account Key: 8lqoh/KKRcq9YbXKjf73mw==

Please note that this API Account Key is uniquely assigned to you and is not to be shared with anyone else. You are to observe the terms and conditions stipulated herein the Singapore Open Data Licence, and API Terms of Service, as acknowledged in your application, and refrain from hyperlinking your products and services directly to DataMall. Lastly, please do not make API calls excessively as DataMall is a shared resource. Your usage will be monitored.

Should you have any further queries, you may contact us at DataMall@lta.gov.sg.



Cheers,
LTA DataMall Team